import json
from pyswaggerapiwrap.http_client import HttpClient
from pyswaggerapiwrap import api_filter
from pyswaggerapiwrap.api_filter import APIDataFrameFilter
import re
import requests
import urllib3
# Disable InsecureRequestWarning
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class ServiceCatalog:
    def __init__(self, source):
        with open('sources.json', 'r') as file:
            catalog = json.load(file)
                
        # Find the source by name
        self.source = next((item for item in catalog['sources'] if item['name'] == source), None)

        if self.source:
            self.http_client = HttpClient(base_url=self.source['url'], auth_token=self.source['authkey'])
            self.routes_dict = self.http_client.get_routes_df(swagger_route="/swagger.json")
            self.jsonapi = self.routes_dict.to_json()
            self.services = self.source['services']
            self.api_filter = APIDataFrameFilter(self.routes_dict)            
        else:
            raise ValueError(f"Source '{source}' not found in catalog")

    def GetServiceMetadata(self,servicename):
        service = next((item for item in self.source['services'] if item['name'] == servicename), None)
        if service:
            return service
        else:
            raise ValueError(f"Service '{servicename}' not found in catalog")
        
    def GetServiceVariables(self,servicename):
        TVars = []
        service = next((item for item in self.source['services'] if item['name'] == servicename), None)
        if service:
            for item  in service['variables']:
                Varkeypair = { "name": item['name'], "value": item['defaultvalue'] or None, "type": item['type'],"defaultvalue": item['defaultvalue'] ,"required": item['required']}
                TVars.append(Varkeypair)
        else:
            raise ValueError(f"Service '{servicename}' not found in catalog")
        return TVars

    def ExecuteService(self, servicename,params ) -> any: 
        service = next((item for item in self.source['services'] if item['name'] == servicename), None)
        if service: 
            #Prepare the name fo the method and route
            method = service['method'].lower()
            vars = re.findall(r'\{.*?\}', service['route'])
            for item in vars:
                route = service['route'].replace(item,'with_'+ item.replace("{","").replace("}",""))
            basepath = '/' + service['entity'] + '/'
            route = route.replace(basepath,"",1)
            dmethod = method + '_' + route
            getobjentity = getattr(self.api_filter, service['entity'])
             # Transform the array into a dynamic dictionary
            dynamic_params = {item['name']: item['value'] for item in params}
            try:
                response = getattr(getobjentity, dmethod).run(http_client=self.http_client, **dynamic_params)
                
            except requests.exceptions.HTTPError as e:
                error_message = e.response.text if e.response else str(e)
                raise ValueError(f"HTTP error occurred while calling service '{servicename}': {error_message}")
            
        else:
            raise ValueError(f"Service '{servicename}' not found in catalog")
        return response
    
    def GetRoutes(self):
        return self.routes_dict

    def ClearVars(self, vars):
        for item in vars:
            item["value"] = item['defaultvalue'] or None
        return vars

    def MapVars(self, vars, context):
        for itemv in vars:
            contextmap = next((item for item in context if item['name'] == itemv['name']), None)
            if service:
                itemv['value'] = contextmap['value']
            elif itemv['required']:
                raise ValueError(f"Service '{itemv['name']}' must be maped in the context")
        return vars
    
#Get the catalog of services from a source
try:
    CatalogoServicios = ServiceCatalog('source1')
    print(CatalogoServicios.routes_dict)
except ValueError as e:
    print(e)    
"""
for i in range(1, 100):
    #**************************Calling the service**************************
    #Get the service method metadata
    try:
        service = CatalogoServicios.GetServiceMetadata('getPetById')
    except ValueError as e:
        print(e)

    #Get the service method variables
    try:
        vars = CatalogoServicios.GetServiceVariables('getPetById')
    except ValueError as e:
        print(e)

    #Clear the interface method variables
    try:
        vars = CatalogoServicios.ClearVars(vars)
    except ValueError as e:
        print(e)

    ConvParams = [{ "name": "petId", "value": i }]

    try:
        vars = CatalogoServicios.MapVars(vars, ConvParams)
    except ValueError as e:
        print(e)

    print(vars)

    try:
        response = CatalogoServicios.ExecuteService('getPetById', vars)
        print(response)
    except ValueError as e:
        print(e)
"""   
    #**************************Calling the service**************************
    #Get the service method metadata
try:
    service = CatalogoServicios.GetServiceMetadata('getUserByName')
except ValueError as e:
    print(e)

#Get the service method variables
try:
    vars = CatalogoServicios.GetServiceVariables('getUserByName')
except ValueError as e:
    print(e)

#Clear the interface method variables
try:
    vars = CatalogoServicios.ClearVars(vars)
except ValueError as e:
    print(e)

ConvParams = [{ "name": "username", "value": 'fjrd12' }]

try:
    vars = CatalogoServicios.MapVars(vars, ConvParams)
except ValueError as e:
    print(e)

print(vars)

try:
    response = CatalogoServicios.ExecuteService('getUserByName', vars)
    print(response)
except ValueError as e:
    print(e)
#**************************Calling the service**************************